-- Copyright 2023-2024 ChenDong, email <baisaichen@live.com>, All rights reserved.

local stlStr = {
    ----------------------shared_ptr-------------------------
	{
		template = "typename T",
		traitsType = "const std::shared_ptr<T> *",
		pushType = "const std::shared_ptr<T> *",
		getType = "std::shared_ptr<T> *",
		useType = "std::shared_ptr<T>",
		adapter = "LuaSharedPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::shared_ptr<T> *",
		pushType = "const std::shared_ptr<T> *",
		getType = "std::shared_ptr<T> *",
		useType = "std::shared_ptr<T>",
		adapter = "LuaSharedPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::shared_ptr<T> * &",
		pushType = "const std::shared_ptr<T> *",
		getType = "std::shared_ptr<T> *",
		useType = "std::shared_ptr<T>",
		adapter = "LuaSharedPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::shared_ptr<T> * &",
		pushType = "const std::shared_ptr<T> *",
		getType = "std::shared_ptr<T> *",
		useType = "std::shared_ptr<T>",
		adapter = "LuaSharedPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::shared_ptr<T> * const &",
		pushType = "const std::shared_ptr<T> *",
		getType = "std::shared_ptr<T> *",
		useType = "std::shared_ptr<T>",
		adapter = "LuaSharedPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::shared_ptr<T> &",
		pushType = "const std::shared_ptr<T> &",
		getType = "std::shared_ptr<T> &",
		useType = "std::shared_ptr<T>",
		adapter = "LuaSharedPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "std::shared_ptr<T> &",
		pushType = "const std::shared_ptr<T> &",
		getType = "std::shared_ptr<T> &",
		useType = "std::shared_ptr<T>",
		adapter = "LuaSharedPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "const std::shared_ptr<T>",
		pushType = "const std::shared_ptr<T> &",
		getType = "const std::shared_ptr<T> &",
		useType = "std::shared_ptr<T>",
		adapter = "LuaSharedPtrAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::shared_ptr<T>",
		pushType = "const std::shared_ptr<T> &",
		getType = "const std::shared_ptr<T> &",
		useType = "std::shared_ptr<T>",
		adapter = "LuaSharedPtrAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
    ----------------------weak_ptr-------------------------
	{
		template = "typename T",
		traitsType = "const std::weak_ptr<T> *",
		pushType = "const std::weak_ptr<T> *",
		getType = "std::weak_ptr<T> *",
		useType = "std::weak_ptr<T>",
		adapter = "LuaWeakPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::weak_ptr<T> *",
		pushType = "const std::weak_ptr<T> *",
		getType = "std::weak_ptr<T> *",
		useType = "std::weak_ptr<T>",
		adapter = "LuaWeakPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::weak_ptr<T> * &",
		pushType = "const std::weak_ptr<T> *",
		getType = "std::weak_ptr<T> *",
		useType = "std::weak_ptr<T>",
		adapter = "LuaWeakPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::weak_ptr<T> * &",
		pushType = "const std::weak_ptr<T> *",
		getType = "std::weak_ptr<T> *",
		useType = "std::weak_ptr<T>",
		adapter = "LuaWeakPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::weak_ptr<T> * const &",
		pushType = "const std::weak_ptr<T> *",
		getType = "std::weak_ptr<T> *",
		useType = "std::weak_ptr<T>",
		adapter = "LuaWeakPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::weak_ptr<T> &",
		pushType = "const std::weak_ptr<T> &",
		getType = "std::weak_ptr<T> &",
		useType = "std::weak_ptr<T>",
		adapter = "LuaWeakPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "std::weak_ptr<T> &",
		pushType = "const std::weak_ptr<T> &",
		getType = "std::weak_ptr<T> &",
		useType = "std::weak_ptr<T>",
		adapter = "LuaWeakPtrAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "const std::weak_ptr<T>",
		pushType = "const std::weak_ptr<T> &",
		getType = "const std::weak_ptr<T> &",
		useType = "std::weak_ptr<T>",
		adapter = "LuaWeakPtrAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::weak_ptr<T>",
		pushType = "const std::weak_ptr<T> &",
		getType = "const std::weak_ptr<T> &",
		useType = "std::weak_ptr<T>",
		adapter = "LuaWeakPtrAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	----------------------vector-------------------------
	{
		template = "typename T",
		traitsType = "const std::vector<T> *",
		pushType = "const std::vector<T> *",
		getType = "std::vector<T> *",
		useType = "std::vector<T>",
		adapter = "LuaVectorAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::vector<T> *",
		pushType = "const std::vector<T> *",
		getType = "std::vector<T> *",
		useType = "std::vector<T>",
		adapter = "LuaVectorAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::vector<T> * &",
		pushType = "const std::vector<T> *",
		getType = "std::vector<T> *",
		useType = "std::vector<T>",
		adapter = "LuaVectorAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::vector<T> * &",
		pushType = "const std::vector<T> *",
		getType = "std::vector<T> *",
		useType = "std::vector<T>",
		adapter = "LuaVectorAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::vector<T> * const &",
		pushType = "const std::vector<T> *",
		getType = "std::vector<T> *",
		useType = "std::vector<T>",
		adapter = "LuaVectorAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::vector<T> &",
		pushType = "const std::vector<T> &",
		getType = "std::vector<T> &",
		useType = "std::vector<T>",
		adapter = "LuaVectorAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "std::vector<T> &",
		pushType = "const std::vector<T> &",
		getType = "std::vector<T> &",
		useType = "std::vector<T>",
		adapter = "LuaVectorAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "const std::vector<T>",
		pushType = "const std::vector<T> &",
		getType = "const std::vector<T> &",
		useType = "std::vector<T>",
		adapter = "LuaVectorAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::vector<T>",
		pushType = "const std::vector<T> &",
		getType = "const std::vector<T> &",
		useType = "std::vector<T>",
		adapter = "LuaVectorAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	----------------------list-------------------------
	{
		template = "typename T",
		traitsType = "const std::list<T> *",
		pushType = "const std::list<T> *",
		getType = "std::list<T> *",
		useType = "std::list<T>",
		adapter = "LuaListAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::list<T> *",
		pushType = "const std::list<T> *",
		getType = "std::list<T> *",
		useType = "std::list<T>",
		adapter = "LuaListAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::list<T> * &",
		pushType = "const std::list<T> *",
		getType = "std::list<T> *",
		useType = "std::list<T>",
		adapter = "LuaListAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::list<T> * &",
		pushType = "const std::list<T> *",
		getType = "std::list<T> *",
		useType = "std::list<T>",
		adapter = "LuaListAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::list<T> * const &",
		pushType = "const std::list<T> *",
		getType = "std::list<T> *",
		useType = "std::list<T>",
		adapter = "LuaListAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::list<T> &",
		pushType = "const std::list<T> &",
		getType = "std::list<T> &",
		useType = "std::list<T>",
		adapter = "LuaListAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "std::list<T> &",
		pushType = "const std::list<T> &",
		getType = "std::list<T> &",
		useType = "std::list<T>",
		adapter = "LuaListAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "const std::list<T>",
		pushType = "const std::list<T> &",
		getType = "const std::list<T> &",
		useType = "std::list<T>",
		adapter = "LuaListAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::list<T>",
		pushType = "const std::list<T> &",
		getType = "const std::list<T> &",
		useType = "std::list<T>",
		adapter = "LuaListAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	----------------------set-------------------------
	{
		template = "typename T",
		traitsType = "const std::set<T> *",
		pushType = "const std::set<T> *",
		getType = "std::set<T> *",
		useType = "std::set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::set<T> *",
		pushType = "const std::set<T> *",
		getType = "std::set<T> *",
		useType = "std::set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::set<T> * &",
		pushType = "const std::set<T> *",
		getType = "std::set<T> *",
		useType = "std::set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::set<T> * &",
		pushType = "const std::set<T> *",
		getType = "std::set<T> *",
		useType = "std::set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::set<T> * const &",
		pushType = "const std::set<T> *",
		getType = "std::set<T> *",
		useType = "std::set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::set<T> &",
		pushType = "const std::set<T> &",
		getType = "std::set<T> &",
		useType = "std::set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "std::set<T> &",
		pushType = "const std::set<T> &",
		getType = "std::set<T> &",
		useType = "std::set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "const std::set<T>",
		pushType = "const std::set<T> &",
		getType = "const std::set<T> &",
		useType = "std::set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::set<T>",
		pushType = "const std::set<T> &",
		getType = "const std::set<T> &",
		useType = "std::set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	----------------------unordered_set-------------------------
	{
		template = "typename T",
		traitsType = "const std::unordered_set<T> *",
		pushType = "const std::unordered_set<T> *",
		getType = "std::unordered_set<T> *",
		useType = "std::unordered_set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::unordered_set<T> *",
		pushType = "const std::unordered_set<T> *",
		getType = "std::unordered_set<T> *",
		useType = "std::unordered_set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::unordered_set<T> * &",
		pushType = "const std::unordered_set<T> *",
		getType = "std::unordered_set<T> *",
		useType = "std::unordered_set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::unordered_set<T> * &",
		pushType = "const std::unordered_set<T> *",
		getType = "std::unordered_set<T> *",
		useType = "std::unordered_set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::unordered_set<T> * const &",
		pushType = "const std::unordered_set<T> *",
		getType = "std::unordered_set<T> *",
		useType = "std::unordered_set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const std::unordered_set<T> &",
		pushType = "const std::unordered_set<T> &",
		getType = "std::unordered_set<T> &",
		useType = "std::unordered_set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "std::unordered_set<T> &",
		pushType = "const std::unordered_set<T> &",
		getType = "std::unordered_set<T> &",
		useType = "std::unordered_set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "const std::unordered_set<T>",
		pushType = "const std::unordered_set<T> &",
		getType = "const std::unordered_set<T> &",
		useType = "std::unordered_set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "std::unordered_set<T>",
		pushType = "const std::unordered_set<T> &",
		getType = "const std::unordered_set<T> &",
		useType = "std::unordered_set<T>",
		adapter = "LuaSetAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	----------------------map-------------------------
	{
		template = "typename K, typename V",
		traitsType = "const std::map<K, V> *",
		pushType = "const std::map<K, V> *",
		getType = "std::map<K, V> *",
		useType = "std::map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::map<K, V> *",
		pushType = "const std::map<K, V> *",
		getType = "std::map<K, V> *",
		useType = "std::map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "const std::map<K, V> * &",
		pushType = "const std::map<K, V> *",
		getType = "std::map<K, V> *",
		useType = "std::map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::map<K, V> * &",
		pushType = "const std::map<K, V> *",
		getType = "std::map<K, V> *",
		useType = "std::map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::map<K, V> * const &",
		pushType = "const std::map<K, V> *",
		getType = "std::map<K, V> *",
		useType = "std::map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "const std::map<K, V> &",
		pushType = "const std::map<K, V> &",
		getType = "std::map<K, V> &",
		useType = "std::map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::map<K, V> &",
		pushType = "const std::map<K, V> &",
		getType = "std::map<K, V> &",
		useType = "std::map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename K, typename V",
		traitsType = "const std::map<K, V>",
		pushType = "const std::map<K, V> &",
		getType = "const std::map<K, V> &",
		useType = "std::map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::map<K, V>",
		pushType = "const std::map<K, V> &",
		getType = "const std::map<K, V> &",
		useType = "std::map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	----------------------pair-------------------------
	{
		template = "typename K, typename V",
		traitsType = "const std::pair<K, V> *",
		pushType = "const std::pair<K, V> *",
		getType = "std::pair<K, V> *",
		useType = "std::pair<K, V>",
		adapter = "LuaPairAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::pair<K, V> *",
		pushType = "const std::pair<K, V> *",
		getType = "std::pair<K, V> *",
		useType = "std::pair<K, V>",
		adapter = "LuaPairAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "const std::pair<K, V> * &",
		pushType = "const std::pair<K, V> *",
		getType = "std::pair<K, V> *",
		useType = "std::pair<K, V>",
		adapter = "LuaPairAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::pair<K, V> * &",
		pushType = "const std::pair<K, V> *",
		getType = "std::pair<K, V> *",
		useType = "std::pair<K, V>",
		adapter = "LuaPairAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::pair<K, V> * const &",
		pushType = "const std::pair<K, V> *",
		getType = "std::pair<K, V> *",
		useType = "std::pair<K, V>",
		adapter = "LuaPairAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "const std::pair<K, V> &",
		pushType = "const std::pair<K, V> &",
		getType = "std::pair<K, V> &",
		useType = "std::pair<K, V>",
		adapter = "LuaPairAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::pair<K, V> &",
		pushType = "const std::pair<K, V> &",
		getType = "std::pair<K, V> &",
		useType = "std::pair<K, V>",
		adapter = "LuaPairAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename K, typename V",
		traitsType = "const std::pair<K, V>",
		pushType = "const std::pair<K, V> &",
		getType = "const std::pair<K, V> &",
		useType = "std::pair<K, V>",
		adapter = "LuaPairAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::pair<K, V>",
		pushType = "const std::pair<K, V> &",
		getType = "const std::pair<K, V> &",
		useType = "std::pair<K, V>",
		adapter = "LuaPairAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	----------------------unordered_map-------------------------
	{
		template = "typename K, typename V",
		traitsType = "const std::unordered_map<K, V> *",
		pushType = "const std::unordered_map<K, V> *",
		getType = "std::unordered_map<K, V> *",
		useType = "std::unordered_map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::unordered_map<K, V> *",
		pushType = "const std::unordered_map<K, V> *",
		getType = "std::unordered_map<K, V> *",
		useType = "std::unordered_map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "const std::unordered_map<K, V> * &",
		pushType = "const std::unordered_map<K, V> *",
		getType = "std::unordered_map<K, V> *",
		useType = "std::unordered_map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::unordered_map<K, V> * &",
		pushType = "const std::unordered_map<K, V> *",
		getType = "std::unordered_map<K, V> *",
		useType = "std::unordered_map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::unordered_map<K, V> * const &",
		pushType = "const std::unordered_map<K, V> *",
		getType = "std::unordered_map<K, V> *",
		useType = "std::unordered_map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "const std::unordered_map<K, V> &",
		pushType = "const std::unordered_map<K, V> &",
		getType = "std::unordered_map<K, V> &",
		useType = "std::unordered_map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::unordered_map<K, V> &",
		pushType = "const std::unordered_map<K, V> &",
		getType = "std::unordered_map<K, V> &",
		useType = "std::unordered_map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename K, typename V",
		traitsType = "const std::unordered_map<K, V>",
		pushType = "const std::unordered_map<K, V> &",
		getType = "const std::unordered_map<K, V> &",
		useType = "std::unordered_map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	{
		template = "typename K, typename V",
		traitsType = "std::unordered_map<K, V>",
		pushType = "const std::unordered_map<K, V> &",
		getType = "const std::unordered_map<K, V> &",
		useType = "std::unordered_map<K, V>",
		adapter = "LuaMapAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	----------------------PureCore::ArrayRef-------------------------
	{
		template = "typename T",
		traitsType = "const PureCore::ArrayRef<T> *",
		pushType = "const PureCore::ArrayRef<T> *",
		getType = "PureCore::ArrayRef<T> *",
		useType = "PureCore::ArrayRef<T>",
		adapter = "LuaArrayRefAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "PureCore::ArrayRef<T> *",
		pushType = "const PureCore::ArrayRef<T> *",
		getType = "PureCore::ArrayRef<T> *",
		useType = "PureCore::ArrayRef<T>",
		adapter = "LuaArrayRefAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const PureCore::ArrayRef<T> * &",
		pushType = "const PureCore::ArrayRef<T> *",
		getType = "PureCore::ArrayRef<T> *",
		useType = "PureCore::ArrayRef<T>",
		adapter = "LuaArrayRefAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "PureCore::ArrayRef<T> * &",
		pushType = "const PureCore::ArrayRef<T> *",
		getType = "PureCore::ArrayRef<T> *",
		useType = "PureCore::ArrayRef<T>",
		adapter = "LuaArrayRefAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "PureCore::ArrayRef<T> * const &",
		pushType = "const PureCore::ArrayRef<T> *",
		getType = "PureCore::ArrayRef<T> *",
		useType = "PureCore::ArrayRef<T>",
		adapter = "LuaArrayRefAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "const PureCore::ArrayRef<T> &",
		pushType = "const PureCore::ArrayRef<T> &",
		getType = "PureCore::ArrayRef<T> &",
		useType = "PureCore::ArrayRef<T>",
		adapter = "LuaArrayRefAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "PureCore::ArrayRef<T> &",
		pushType = "const PureCore::ArrayRef<T> &",
		getType = "PureCore::ArrayRef<T> &",
		useType = "PureCore::ArrayRef<T>",
		adapter = "LuaArrayRefAdapter",
		userData = "LuaUserdataPtr",
		isGetPtr = true,
	},
	{
		template = "typename T",
		traitsType = "const PureCore::ArrayRef<T>",
		pushType = "const PureCore::ArrayRef<T> &",
		getType = "const PureCore::ArrayRef<T> &",
		useType = "PureCore::ArrayRef<T>",
		adapter = "LuaArrayRefAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
	{
		template = "typename T",
		traitsType = "PureCore::ArrayRef<T>",
		pushType = "const PureCore::ArrayRef<T> &",
		getType = "const PureCore::ArrayRef<T> &",
		useType = "PureCore::ArrayRef<T>",
		adapter = "LuaArrayRefAdapter",
		userData = "LuaUserdata",
		isGetPtr = false,
	},
}

function create_traits(info)
	local temp = {}
	table.insert(temp, "\t//")
	table.insert(temp, info.traitsType)
	table.insert(temp, "\n\ttemplate <")
	table.insert(temp, info.template)
	table.insert(temp, ">\n\tstruct LuaStack <")
	table.insert(temp, info.traitsType)
	table.insert(temp, ">\n\t{\n\t\ttypedef ")
	table.insert(temp, info.pushType)
	table.insert(temp, " PushType;\n\t\ttypedef ");
	table.insert(temp, info.getType)
	table.insert(temp, " GetType;\n\t\tstatic inline void push(lua_State * L, PushType value)\n\t\t{\n\t\t\t (void) __;")
	table.insert(temp, info.userData)
	table.insert(temp, "::push<")
	table.insert(temp, info.useType)
	table.insert(temp, ">(L, ")
	if info.isGetPtr then
		table.insert(temp, "&")
	end
	table.insert(temp, "value);\n\t\t}\n\n")
	table.insert(temp, "\t\tstatic inline GetType get(lua_State * L, int idx)\n\t\t{\n\t\t\t (void) __;return ")
	if info.isGetPtr then
		table.insert(temp, "*")
	end
	table.insert(temp, info.userData)
	table.insert(temp, "::get<")
	table.insert(temp, info.useType)
	table.insert(temp, ">(L, idx);\n\t\t}\n\n")

	table.insert(temp, "\t\tstatic inline bool valid(lua_State * L, int idx)\n\t\t{\n\t\t\t (void) __;")
	table.insert(temp, "return LuaMetatableTraits<")
	table.insert(temp, info.useType)
	table.insert(temp, ">::is_class_type(L, idx);\n\t\t}\n\n\t\t")

	table.insert(temp, "static LuaSTLHelper<")
	table.insert(temp, info.adapter)
	table.insert(temp, "<")
	table.insert(temp, info.useType)
	table.insert(temp, ">> __;\n\t};")

	table.insert(temp, "\n\ttemplate <")
	table.insert(temp, info.template)
	table.insert(temp, ">\n\tLuaSTLHelper<")
	table.insert(temp, info.adapter)
	table.insert(temp, "<")
	table.insert(temp, info.useType)
	table.insert(temp, ">> ")
	table.insert(temp, "LuaStack<")
	table.insert(temp, info.traitsType)
	table.insert(temp, ">::__;\n\n")

	return table.concat(temp)
end

local data = [[// Copyright 2023-present ChenDong, email <baisaichen@live.com>, All rights reserved.
// this is a generate file, do't modify

#pragma once

#include "PureCore/ArrayRef.h"
#include "PureLua/LuaUserdata.h"
#include "PureLua/LuaStackStdFunc.h"
#include "PureLua/LuaSTLAdapter.h"

#include <vector>
#include <list>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <memory>

namespace PureLua {
]]
for k, v in ipairs(stlStr) do
	data = data .. create_traits(v)
end
data = data .. "}"
local fileName = "../include/PureLua/LuaStackSTL.h"
local fp = io.open(fileName, "r")
if not fp then
	error(strint.format("not found file `%s`", fileName))
end
fp:close()
fp = io.open(fileName, "wb")
fp:write(data)
fp:close()
